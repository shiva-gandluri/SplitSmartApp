rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and data validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidBillParticipant(billData) {
      return request.auth.uid in billData.participantIds;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'displayName']) &&
             request.resource.data.email is string &&
             request.resource.data.displayName is string;
    }
    
    // Users collection - private user data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId) && isValidUserData();
    }
    
    // Participants collection - public user lookup (read-only for participants)
    match /participants/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Bills collection - collaborative bill data
    match /bills/{billId} {
      // Read access: Any authenticated participant in the bill
      allow read: if isAuthenticated() && 
                     isValidBillParticipant(resource.data) &&
                     resource.data.isDeleted == false;
      
      // Create access: Any authenticated user (becomes bill creator)
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.createdBy &&
                       request.resource.data.isDeleted == false &&
                       request.auth.uid in request.resource.data.participantIds;
      
      // Update access: Only bill creator can edit
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.createdBy &&
                       isValidBillParticipant(resource.data) &&
                       // Prevent changing critical fields
                       request.resource.data.createdBy == resource.data.createdBy &&
                       request.resource.data.id == resource.data.id;
      
      // Delete access: Only bill creator (soft delete by setting isDeleted = true)
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.createdBy &&
                       request.resource.data.isDeleted == true &&
                       // Ensure other fields remain unchanged during deletion
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isDeleted', 'lastModified']);
    }
    
    // Groups collection (future feature)
    match /groups/{groupId} {
      allow read, write: if isAuthenticated();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}