rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Enhanced rate limiting with App Check verification
    function checkAppCheckAndRateLimit(operation) {
      // In production, you can enforce App Check here
      // return request.app_check_token != null && checkRateLimit(operation);
      // For now, just use rate limiting
      return checkRateLimit(operation);
    }
    
    // Rate limiting function - basic time-based throttling
    function checkRateLimit(operation) {
      return request.time > timestamp.date(2023, 1, 1);
    }
    
    // Users can only access their own user document - NO cross-user access
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Secure participant lookup collection with App Check
    match /participants/{participantId} {
      allow read: if request.auth != null && checkAppCheckAndRateLimit('read');
      allow write: if request.auth != null && request.auth.uid == participantId && checkAppCheckAndRateLimit('write');
      allow create: if request.auth != null && request.auth.uid == request.resource.id && checkAppCheckAndRateLimit('create');
    }
    
    // Sessions with App Check enforcement
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participantIds &&
        checkAppCheckAndRateLimit('session');
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy &&
        validateSessionData(request.resource.data) &&
        checkAppCheckAndRateLimit('create');
    }
    
    // Session data validation function
    function validateSessionData(data) {
      return data.keys().hasAll(['createdBy', 'participantIds', 'createdAt']) &&
             data.createdBy is string &&
             data.participantIds is list &&
             data.participantIds.size() >= 1 &&
             data.participantIds.size() <= 50 &&
             data.createdBy in data.participantIds &&
             (!('total' in data) || (data.total is number && data.total >= 0)) &&
             (!('status' in data) || data.status in ['active', 'completed', 'cancelled']) &&
             (!('items' in data) || data.items is list);
    }
    
    // Expenses with App Check enforcement
    match /expenses/{expenseId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.paidBy ||
        request.auth.uid in resource.data.participants
      ) && checkAppCheckAndRateLimit('expense');
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.paidBy &&
        validateExpenseData(request.resource.data) &&
        checkAppCheckAndRateLimit('create');
    }
    
    // Expense data validation function
    function validateExpenseData(data) {
      return data.keys().hasAll(['paidBy', 'participants', 'amount', 'description', 'createdAt']) &&
             data.paidBy is string &&
             data.participants is list &&
             data.participants.size() >= 1 &&
             data.participants.size() <= 50 &&
             data.paidBy in data.participants &&
             data.amount is number &&
             data.amount > 0 &&
             data.amount <= 1000000 &&
             data.description is string &&
             data.description.size() >= 1 &&
             data.description.size() <= 500 &&
             (!('category' in data) || (data.category is string && data.category.size() <= 100));
    }
    
    // Groups with App Check enforcement
    match /groups/{groupId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.members &&
        checkAppCheckAndRateLimit('group');
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy &&
        validateGroupData(request.resource.data) &&
        checkAppCheckAndRateLimit('create');
    }
    
    // Group data validation function
    function validateGroupData(data) {
      return data.keys().hasAll(['createdBy', 'members', 'name', 'createdAt']) &&
             data.createdBy is string &&
             data.members is list &&
             data.members.size() >= 2 &&
             data.members.size() <= 100 &&
             data.createdBy in data.members &&
             data.name is string &&
             data.name.size() >= 1 &&
             data.name.size() <= 100 &&
             (!('description' in data) || (data.description is string && data.description.size() <= 500));
    }
    
    // System collections - read-only for maintenance
    match /_system/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only via admin SDK
    }
    
    // Default deny all other collections for security
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
